/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ancode.ui;

import org.ancode.comm.Auth;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.logging.*;
import javax.swing.*;
import org.ancode.comm.CloseTabIcon;
import org.ancode.model.Group;
import org.ancode.model.Member;
import org.ancode.model.Message;
import org.ancode.service.StackMessageService;


public class ChatDialog extends JFrame {

    private HashMap tabMaps = new HashMap();
    private JTabbedPane tabChat;
    
    public HashMap getTabMaps() {
        return tabMaps;
    }

    public void setTabMaps(HashMap tabMaps) {
        this.tabMaps = tabMaps;
    }

    /**
     * Creates new form ChatDialog
     */
    public ChatDialog(JFrame parent, boolean modal) {
        //super(parent, modal);
        initComponents();
        this.setIconImage(Auth.getMember().getFace().getImage());
        this.validate();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabChat = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new Rectangle(350, 160, 0, 0));

        tabChat.setTabPlacement(JTabbedPane.BOTTOM);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(tabChat, GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addComponent(tabChat, GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addGap(9, 9, 9)))
        );

        pack();
    }
    
    public void addChat(Message msg) throws Exception {
        Member member = msg.getMember();
        Group group = msg.getGroup();
        
        BaseChatPanel p = null;
        String title = "";
        if(member != null) {
            p =new ChatPanel(member); 
            title = member.getNickname();
        } else if(group != null ) {
           p = new GroupChatPanel(group);
           title = group.getName();
        }else {
            return ;
        }
        
        final Icon icon = new CloseTabIcon(this.getClass().getClassLoader().getResource("/res/images/icon/close.png"));
        
        this.addTab(title, icon, p, msg);

        tabChat.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int tabNumber = tabChat.getUI().tabForCoordinate(tabChat, e.getX(), e.getY());
                if (tabNumber < 0) {
                    return;
                }
                //Log.println("tabNumber: " + tabNumber);
                Rectangle rect = ((CloseTabIcon) tabChat.getIconAt(tabNumber)).getBounds();
                if (rect.contains(e.getX(), e.getY())) {
                    //the tab is being closed  
                    removeTabAt(tabNumber);
                    if(tabChat.getTabCount() == 0) {
                        dispose();
                    }
                }
            }
        });
    }

    public void addTab(String title, Icon icon, BaseChatPanel component, Message msg) {
        Member member = null;
        Group group = null;
        long id = -2;
        if(msg.getMember() != null) {
            member = msg.getMember();
            id = member.getUin();
        } else if(msg.getGroup() != null){
            group = msg.getGroup();
            id = group.getId();
        }else{
            return ;
        }
        
        String key = "tab_" + id;
        BaseChatPanel c = (BaseChatPanel) tabMaps.get(key);
        if(c != null) {
            if(tabChat.isAncestorOf(c)) {
                if(msg != null) {
                    c.setMessages(msg);
                }
                tabChat.setSelectedComponent(c);
                this.validate();
                this.setVisible(true);
                return ;
            }
            component = c;
        }
        if(msg != null) {
            component.setMessages(msg);
        }
        tabMaps.put(key, component);
        tabChat.addTab(title, icon, component);
        tabChat.setSelectedComponent(component);
        
        this.validate();
        this.setVisible(true);
    }

    public void removeTabAt(int index) {
        
        BaseChatPanel component = (BaseChatPanel)tabChat.getComponentAt(index);
        String key = "tab_" + component.getId();
        tabMaps.remove(key);
        tabChat.removeTabAt(index);
       // Log.println("TabCount: " + tabChat.getTabCount() + " MapCount:" + tabMaps.size() + " key:" + key);
        
        this.validate();
        this.setVisible(true);
    }
    
    public void dispose() {
        StackMessageService.getIntance().setMessageMaps(null);
        if(tabMaps != null) {
            tabMaps.clear();
        }
        if(tabChat != null) {
            tabChat.removeAll();
        }
        this.setVisible(false);
    }
}
